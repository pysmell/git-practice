.proto 文件以一个包声明开始，这用于防止不同项目间的命名冲突。在Java中，包名被用作Java包，
除非你已经显式地指定了 java_package，如我们这里看到的。即使你不提供 java_package，你依然应该定义一个普通的 package
以避免Protocol Buffers命名空间中的冲突，以及在非Java语言中。

声明了包之后，你可以看到两个Java特有的选项： java_package 和 java_outer_classname。java_package
指定生成的类应该放在什么Java包名下。如果你没有显式地指定这个值，则它简单地匹配由package 声明给出的Java包名，
但这些名字通常都不是合适的Java包名 (由于它们通常不以一个域名打头)。 java_outer_classname 选项定义应该包含这个文件中所有类的
类名。如果你没有显式地给定java_outer_classname ，则将通过把文件名转换为首字母大写来生成。比如"my_proto.proto"，默认情况下，
将使用 "MyProto" 做为它的外层类的类名。

接下来，定义你的消息。消息只是包含了具有类型的字段的聚合。许多标准的简单数据类型可用作字段类型，
包括bool，int32，float，double，和string。你也可以通过使用消息类型作为字段类型来给你的消息添加更多结构 —— 在上面的例子中，Person消息包含了多个PhoneNumber消息，同时AddressBook消息包含Person消息。你甚至可以在其它消息中嵌套的定义消息类型 —— 如你所见，PhoneNumber类型是在Person中定义的。如果你想要你的字段值为某个预定义的值列表中的某个值的话，你也可以定义enum类型 —— 这里你想要指定电话号码是MOBILE，HOME，或WORK中的一个。

每个元素上的 " = 1"，" = 2"标记标识在二进制编码中使用的该字段唯一的 "tag" 。Tag数字 1-15 比更大的数字在编码上少一个字节，因而作为一种优化，你可以决定将那些数字用作常用的或重复的元素的tag，而将16及更大的数字tag留给更加不常用的可选元素。重复字段中的每个元素需要重编码tag数字，因而这种优化特别适用于重复字段。

每个字段必须用下面的修饰符中的一个来注解：

required：字段必须提供，否则消息将被认为是 "未初始化的 (uninitialized)"。尝试构建一个未初始化的消息将抛出一个 RuntimeException。解析一个未初始化的消息将抛出一个 IOException。此外，required字段的行为与optional字段完全相同。

optional：字段可以设置也可以不设置。如果可选的字段值没有设置，则将使用默认值。对于简单的类型，你可以指定你自己的默认值，如我们在例子中为电话号码 类型 做的那样。否则，将使用系统默认值：数字类型为0，字符串类型为空字符串，bools值为false。对于内嵌的消息，默认值总是消息的 "默认实例 (default instance)" 或 "原型(prototype)"，它们没有自己的字段集。调用accessor获取还没有显式地设置的 optional (或required) 字段的值总是返回字段的默认值。

repeated：字段可以重复任意多次 (包括0)。在 protocol buffer 中，重复值的顺序将被保留。将重复字段想象为动态大小的数组。

Oneof：如果你的消息中有很多可选字段， 并且同时至多一个字段会被设置， 你可以加强这个行为，使用oneof特性节省内存.
Oneof字段就像可选字段， 除了它们会共享内存， 至多一个字段会被设置。 设置其中一个字段会清除其它oneof字段。 你可以使用case()或者WhichOneof() 方法检查哪个oneof字段被设置， 看你使用什么语言了.
可以增加oneof字段到 oneof 定义中. 你可以增加任意类型的字段, 但是不能使用 required, optional, repeated 关键字.
设置oneof会自动清楚其它oneof字段的值. 所以设置多次后，只有最后一次设置的字段有值